buildscript {
    // Dependencies repositories
    repositories {
        mavenCentral()
        jcenter()
    }

    // ANTLR4 gradle wrapper
    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

// IntelliJ Idea project
apply plugin: 'idea'
// Java project
apply plugin: 'java'
// Runnable application
apply plugin: 'application'
// ANTLR4 gradle wrapper
apply plugin: 'me.champeau.gradle.antlr4'

// Application
mainClassName = 'edu.ucsd.cse232b.jsidrach.xpath.XPathRunner'
version = '0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Unit tests
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // ANTLR4
    compile 'org.antlr:antlr4-runtime:4.6'
}

// Ignore deprecation warnings introduced by ANTLR4
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:-unchecked" << "-Xlint:-deprecation"
}

// ANTLR4 configuration
def generatedSources = 'target/generated-sources'
def antlrGeneratedPath = generatedSources + '/antlr'
def grammarGeneratedPath = antlrGeneratedPath + '/edu/ucsd/cse232b/jsidrach/xpath/parser'

// Do not generate listener base classes
antlr4.listener = false

// Set output
antlr4.output = file(grammarGeneratedPath)

// Add ANTLR4 generatedSources as a source directory
sourceSets.main.java.srcDir generatedSources
sourceSets.test.java.srcDir generatedSources

// Remove ANTLR4 generatedSources directory on clean
clean.delete generatedSources

// Run ANTLR4 before compiling the rest of the java files
compileJava.dependsOn antlr4

// Add ANTLR4 to classpath
configurations {
    compile.extendsFrom antlr4
}

// Configure IntelliJ Idea to include ANTLR4 java output to src
idea.module.sourceDirs += file(antlrGeneratedPath)
idea.module.generatedSourceDirs += file(antlrGeneratedPath)

// Create a single application jar
// From: http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle generated jar',
                   'Implementation-Version': version,
                   'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Generate documentation
task docs(type: Javadoc) {
    title = "CSE 232B - Project Documentation - J. Sidrach"
    source = "src/main/java"
    destinationDir = file("docs/javadoc")
    failOnError = false
}
compileJava.dependsOn docs