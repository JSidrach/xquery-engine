//
// Build dependencies
//

buildscript {
    // Dependencies repositories
    repositories {
        mavenCentral()
        jcenter()
    }

    // ANTLR4 gradle wrapper
    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

//
// Gradle wrapper
//

task wrapper(type: Wrapper) {
  gradleVersion = '3.3'
  distributionUrl = 'https://services.gradle.org/distributions/gradle-3.3-all.zip'
}

//
// Plugins
//

// IntelliJ Idea project
apply plugin: 'idea'
// Java project
apply plugin: 'java'
// Runnable application
apply plugin: 'application'
// ANTLR4 gradle wrapper
apply plugin: 'me.champeau.gradle.antlr4'

//
// Source code configuration
//

mainClassName = 'edu.ucsd.cse232b.jsidrach.xpath.XPathRunner'
version = '1.0'
sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

//
// Dependencies
//

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Unit tests
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // ANTLR4
    compile 'org.antlr:antlr4-runtime:4.6'
}

//
// ANTLR 4
//

// ANTLR4 configuration
def generatedSources = 'target/generated-sources'
def antlrGeneratedPath = generatedSources + '/antlr'
def grammarGeneratedPath = antlrGeneratedPath + '/edu/ucsd/cse232b/jsidrach/xpath/parser'

// Do not generate listener base classes
antlr4.listener = false

// Set output
antlr4.output = file(grammarGeneratedPath)

// Add ANTLR4 generatedSources as a source directory
sourceSets.main.java.srcDir generatedSources
sourceSets.test.java.srcDir generatedSources

// Remove ANTLR4 generatedSources directory on clean
clean.delete generatedSources

// Run ANTLR4 before compiling the rest of the java files
compileJava.dependsOn antlr4

// Add ANTLR4 to classpath
configurations {
    compile.extendsFrom antlr4
}

// Configure IntelliJ Idea to include ANTLR4 java output to src
idea.module.sourceDirs += file(antlrGeneratedPath)
idea.module.generatedSourceDirs += file(antlrGeneratedPath)

//
// Application jars
//

def course = 'CSE 232B'
def author = 'J. Sidrach'
task xPathJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': course + ' - XPath Processor - ' + author,
                   'Implementation-Version': version,
                   'Main-Class': 'edu.ucsd.cse232b.jsidrach.xpath.XPathRunner'
    }
    archiveName = 'xpath.jar'
    destinationDir = file('demo')
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//
// Documentation
//

task docs(type: Javadoc) {
    title = course + ' - Project Documentation - ' + author
    source = 'src/main/java'
    destinationDir = file('docs/javadoc')
    failOnError = false
}

//
// Tests
//

// Show output
test.testLogging.showStandardStreams = true
test.testLogging.exceptionFormat = 'full'

//
// Automated actions after build
//

build.finalizedBy(docs, xPathJar)
